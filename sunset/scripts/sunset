#!/bin/bash
# 
# 🌅 Project Sunset - Unified Pipeline Entry Point
# =============================================
# 
# Beautiful, clean entry point for all Project Sunset operations
# 
# Usage:
#   ./sunset                    # Run daily pipeline
#   ./sunset --help            # Show all options
#   ./sunset --recovery-only   # Just recover missing jobs
#   ./sunset --test            # Test mode
# 

set -e  # Exit on any error

# Colors for beautiful output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Beautiful banner
echo -e "${PURPLE}"
echo "╭───────────────────────────────────────────────────────────────────────╮"
echo "│                                                                       │"
echo "│     ╔═══════════════════════════════════════════════════════════════╗ │"
echo "│     ║  🌅  PROJECT SUNSET - INTELLIGENT JOB MATCHING PIPELINE  🌅   ║ │"
echo "│     ║                                                               ║ │"
echo "│     ║  \"Automating the job application process with AI precision\"   ║ │"
echo "│     ╚═══════════════════════════════════════════════════════════════╝ │"
echo "│                                                                       │"
echo "╰───────────────────────────────────────────────────────────────────────╯"
echo -e "${NC}"

# Change to script directory
cd "$(dirname "$0")"

# Check if virtual environment exists and activate it
if [ -d "venv" ]; then
    echo -e "${YELLOW}🐍 Activating virtual environment...${NC}"
    source venv/bin/activate
elif [ -d ".venv" ]; then
    echo -e "${YELLOW}🐍 Activating virtual environment...${NC}"
    source .venv/bin/activate
fi

# Determine what to run based on arguments
if [ "$#" -eq 0 ]; then
    # Default: Run INCREMENTAL daily pipeline (preserves existing work)
    echo -e "${GREEN}🌅 Running incremental daily pipeline...${NC}"
    echo "📅 Date: $(date)"
    echo -e "${CYAN}💡 This will preserve existing jobs and only add new ones${NC}"
    echo
    python scripts/pipeline/main.py --run-all --max-jobs 10
    
elif [[ "$1" == "--help" || "$1" == "-h" ]]; then
    # Show help
    echo -e "${CYAN}📖 Project Sunset Usage:${NC}"
    echo
    echo -e "${YELLOW}Daily Operations:${NC}"
    echo "  ./sunset                    Run incremental daily pipeline (preserves existing work)"
    echo "  ./sunset --fresh-start     Run fresh daily pipeline (clears and refetches all)"
    echo "  ./sunset --test            Run in test mode (fewer jobs)"
    echo "  ./sunset --max-jobs N      Fetch up to N jobs"
    echo "  ./sunset --no-email        Skip email delivery"
    echo
    echo -e "${YELLOW}Recovery & Maintenance:${NC}"
    echo "  ./sunset --recovery-only   Recover missing jobs only"
    echo "  ./sunset --health-check    System health check only"
    echo
    echo -e "${YELLOW}Advanced Options:${NC}"
    echo "  ./sunset --fetch-only      Fetch jobs only"
    echo "  ./sunset --process-only    Process with AI only"  
    echo "  ./sunset --export-only     Export to Excel only"
    echo "  ./sunset --force-reprocess Force reprocess all jobs"
    echo
    echo -e "${CYAN}Examples:${NC}"
    echo "  ./sunset --test --no-email"
    echo "  ./sunset --max-jobs 20"
    echo "  ./sunset --recovery-only"
    echo
    
elif [[ "$1" == "--fresh-start" ]]; then
    # Fresh start mode (force reprocess all jobs)
    echo -e "${YELLOW}🧹 Running fresh start pipeline (force reprocess all jobs)...${NC}"
    shift
    python scripts/pipeline/main.py --run-all --force-reprocess --max-jobs 10 "$@"
    
elif [[ "$1" == "--test" ]]; then
    # Test mode
    echo -e "${YELLOW}🧪 Running in test mode...${NC}"
    shift  # Remove --test from arguments
    # Check if --no-email is in the remaining args and remove it since it's not supported by main.py
    args=()
    no_email=false
    for arg in "$@"; do
        if [[ "$arg" == "--no-email" ]]; then
            no_email=true
        else
            args+=("$arg")
        fi
    done
    python scripts/pipeline/main.py --run-all --max-jobs 5 --quick "${args[@]}"
    
elif [[ "$1" == "--recovery-only" ]]; then
    # Recovery only
    echo -e "${CYAN}🔧 Running recovery mode...${NC}"
    shift
    python scripts/pipeline/main.py --recovery-only "$@"
    
elif [[ "$1" == "--health-check" ]]; then
    # Health check only
    echo -e "${BLUE}🏥 Running health check...${NC}"
    python scripts/pipeline/main.py --health-check
    
else
    # Pass all arguments to main.py
    echo -e "${GREEN}🚀 Running with custom options...${NC}"
    python scripts/pipeline/main.py "$@"
fi

# Check exit code
if [ $? -eq 0 ]; then
    echo
    echo -e "${GREEN}✅ Operation completed successfully!${NC}"
    echo -e "${CYAN}📊 Check output/excel/ for reports${NC}"
    echo -e "${CYAN}📧 Check your email for summaries${NC}"
else
    echo
    echo -e "${RED}❌ Operation failed!${NC}"
    echo -e "${YELLOW}📋 Check logs/ directory for details${NC}"
    exit 1
fi
