#!/usr/bin/env python3
"""
Test script to run the pipeline with only phi3 generation for specific jobs.
"""
import sys
import os
import argparse
from pathlib import Path

# Get the project root directory
PROJECT_ROOT = Path(__file__).parent

# Add the project root to path if needed
if str(PROJECT_ROOT) not in sys.path:
    sys.path.insert(0, str(PROJECT_ROOT))

from run_pipeline.core.pipeline_orchestrator import run_pipeline
from run_pipeline.core.cli_args import parse_args

def main():
    # Define our own argument parser to handle positional arguments better
    parser = argparse.ArgumentParser(description="Run phi3 generation for specific jobs")
    parser.add_argument("--job-id", default="61691", 
                       help="Job ID to process (defaults to 61691 if not provided)")
    parser.add_argument("--force", action="store_true", 
                       help="Force reprocessing even if phi3 fields already exist")
    parser.add_argument("--verbose", action="store_true",
                       help="Enable verbose output")
    
    # Parse our arguments
    our_args = parser.parse_args()
    job_id = our_args.job_id
    verbose = our_args.verbose
    
    print(f"Running pipeline with only-regenerate-phi3 on job ID {job_id}")
    
    if verbose:
        # Configure logging to show more output
        import logging
        logging.basicConfig(
            level=logging.INFO,
            format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
            handlers=[logging.StreamHandler(sys.stdout)]
        )
    
    # Create a custom Namespace for the pipeline using default args
    args = parse_args([])  # Start with default args
    
    # Modify args to run phi3 regeneration only
    args.job_ids = job_id
    args.only_regenerate_phi3 = True
    args.skip_fetch = True  # Skip fetching as we only want to regenerate phi3 fields
    args.skip_status_check = True  # Skip status check
    args.skip_skills = True  # Skip skills processing
    args.force_reprocess = True  # Force reprocess phi3 fields
    
    # Run the pipeline
    success = run_pipeline(args)
    
    # Print completion message
    if success:
        print(f"\nPhi3 regeneration completed successfully for job ID {job_id}")
    else:
        print(f"\nPhi3 regeneration encountered errors for job ID {job_id}")
    
    return 0 if success else 1

if __name__ == "__main__":
    sys.exit(main())
